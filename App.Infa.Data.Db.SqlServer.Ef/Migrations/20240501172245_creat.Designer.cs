// <auto-generated />
using System;
using App.Infa.Data.Db.SqlServer.Ef.DbCtx;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Infa.Data.Db.SqlServer.Ef.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240501172245_creat")]
    partial class creat
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("App.Domain.Core.Tickets.Entities.Attache", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MessegeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MessegeId");

                    b.ToTable("Attache");
                });

            modelBuilder.Entity("App.Domain.Core.Tickets.Entities.Messege", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ExpertUserId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExpertUserId");

                    b.HasIndex("TicketId");

                    b.ToTable("Messeges");
                });

            modelBuilder.Entity("App.Domain.Core.Tickets.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerUserId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitPartId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerUserId");

                    b.HasIndex("UnitId");

                    b.HasIndex("UnitPartId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("App.Domain.Core.Units.Entities.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("App.Domain.Core.Units.Entities.UnitPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("App.Domain.Core.Users.Entitis.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("App.Domain.Core.Tickets.Entities.Attache", b =>
                {
                    b.HasOne("App.Domain.Core.Tickets.Entities.Messege", "Messege")
                        .WithMany("Attaches")
                        .HasForeignKey("MessegeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Messege");
                });

            modelBuilder.Entity("App.Domain.Core.Tickets.Entities.Messege", b =>
                {
                    b.HasOne("App.Domain.Core.Users.Entitis.User", "ExpertUser")
                        .WithMany()
                        .HasForeignKey("ExpertUserId");

                    b.HasOne("App.Domain.Core.Tickets.Entities.Ticket", "Ticket")
                        .WithMany("Messeges")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExpertUser");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("App.Domain.Core.Tickets.Entities.Ticket", b =>
                {
                    b.HasOne("App.Domain.Core.Users.Entitis.User", "CustomerUser")
                        .WithMany()
                        .HasForeignKey("CustomerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Units.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.HasOne("App.Domain.Core.Units.Entities.UnitPart", "UnitPart")
                        .WithMany()
                        .HasForeignKey("UnitPartId");

                    b.Navigation("CustomerUser");

                    b.Navigation("Unit");

                    b.Navigation("UnitPart");
                });

            modelBuilder.Entity("App.Domain.Core.Units.Entities.UnitPart", b =>
                {
                    b.HasOne("App.Domain.Core.Units.Entities.Unit", "Unit")
                        .WithMany("Parts")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("App.Domain.Core.Users.Entitis.User", b =>
                {
                    b.HasOne("App.Domain.Core.Units.Entities.Unit", null)
                        .WithMany("MnagerUsers")
                        .HasForeignKey("UnitId");
                });

            modelBuilder.Entity("App.Domain.Core.Tickets.Entities.Messege", b =>
                {
                    b.Navigation("Attaches");
                });

            modelBuilder.Entity("App.Domain.Core.Tickets.Entities.Ticket", b =>
                {
                    b.Navigation("Messeges");
                });

            modelBuilder.Entity("App.Domain.Core.Units.Entities.Unit", b =>
                {
                    b.Navigation("MnagerUsers");

                    b.Navigation("Parts");
                });
#pragma warning restore 612, 618
        }
    }
}
